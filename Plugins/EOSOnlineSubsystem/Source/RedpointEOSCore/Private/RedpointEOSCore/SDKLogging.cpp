// Copyright June Rhodes 2024. All Rights Reserved.

#include "RedpointEOSCore/SDKLogging.h"

#include "RedpointEOSCore/Logging.h"

#if PLATFORM_WINDOWS
#include "Windows/AllowWindowsPlatformTypes.h"

#include <libloaderapi.h>

#include "Windows/HideWindowsPlatformTypes.h"
#endif

namespace Redpoint::EOS::Core
{

#if WITH_EDITOR
FSDKLogging::FOnLogForwardedForEditor FSDKLogging::EditorLogHandler = nullptr;
#endif

void FSDKLogging::Log(const EOS_LogMessage *Message)
{
    if (Message == nullptr)
    {
        return;
    }

    EOS_ELogLevel EOSMsgLevel = Message->Level;
    if (FString(ANSI_TO_TCHAR(Message->Category)) == TEXT("LogEOSEcom") &&
        Message->Level == EOS_ELogLevel::EOS_LOG_Warning &&
        FString(ANSI_TO_TCHAR(Message->Message)).Contains(TEXT("EOS_NotConfigured")))
    {
        // This warning about the purchase flow not being available due to the overlay is just annoying and
        // not relevant for most games. Prevent it from generating a warning in tests by pushing it down
        // to info level.
        EOSMsgLevel = EOS_ELogLevel::EOS_LOG_Info;
    }
    if (FString(ANSI_TO_TCHAR(Message->Category)) == TEXT("LogEOSConnect") &&
        Message->Level == EOS_ELogLevel::EOS_LOG_Warning &&
        FString(ANSI_TO_TCHAR(Message->Message)).Contains(TEXT("EOS_UnrecognizedResponse")))
    {
        // This warning is generated by a known bug where EOS returns EOS_UnrecognizedResponse when querying
        // for account information on device ID users. Prevent it from generating a warning in tests by
        // pushing it down to info level.
        EOSMsgLevel = EOS_ELogLevel::EOS_LOG_Info;
    }
    if (FString(ANSI_TO_TCHAR(Message->Category)) == TEXT("LogEOSConnect") &&
        Message->Level == EOS_ELogLevel::EOS_LOG_Error &&
        FString(ANSI_TO_TCHAR(Message->Message))
            .Contains(TEXT("DeviceId access credentials not found on the local device.")))
    {
        // This error is generated when we try to sign in with device ID credentials for the first time, and the
        // credentials don't yet exist. It's not actually an error since the Authentication Graph will recognise
        // this result and automatically create the device ID credentials as needed. Prevent it from causing test
        // failures by pushing it down to info level.
        EOSMsgLevel = EOS_ELogLevel::EOS_LOG_Info;
    }
    if (FString(ANSI_TO_TCHAR(Message->Category)) == TEXT("LogEOS") &&
        Message->Level == EOS_ELogLevel::EOS_LOG_Warning &&
        FString(ANSI_TO_TCHAR(Message->Message)).Contains(TEXT("errors.com.epicgames.eos.auth.user_not_found")))
    {
        // This warning is generated when an EOS user is not found, usually when signing in for the first time. Reduce
        // this to an informational message.
        EOSMsgLevel = EOS_ELogLevel::EOS_LOG_Info;
    }
    if (FString(ANSI_TO_TCHAR(Message->Category)) == TEXT("LogEOSLobby") &&
        Message->Level == EOS_ELogLevel::EOS_LOG_Error &&
        FString(ANSI_TO_TCHAR(Message->Message))
            .Contains(
                TEXT("Invalid parameter EOS_Lobby_RejectInviteOptions.LocalUserId reason: cannot be null or empty")))
    {
        // Refer to FOnlinePartySystemEOS::RejectInvitation as to why this error can occur in situations where it's
        // safe to ignore it (allowing this error to propagate causes unnecessary unit tests failures).
        EOSMsgLevel = EOS_ELogLevel::EOS_LOG_Info;
    }
    if (FString(ANSI_TO_TCHAR(Message->Category)) == TEXT("LogFileManager") &&
        Message->Level == EOS_ELogLevel::EOS_LOG_Error &&
        FString(ANSI_TO_TCHAR(Message->Message)).StartsWith(TEXT("Error moving file")))
    {
        // This non-critical error occurs on some platforms (where the EOS SDK does not seem to close file handles
        // properly). It's not a critical error in all cases, and the original operation can return
        // EOS_EResult::EOS_Success, but having this emit at error level causes the unit test to fail (even though
        // again, the operation succeeded). Downgrade it to a warning, since we check the EOS_EResult anyway.
        EOSMsgLevel = EOS_ELogLevel::EOS_LOG_Warning;
    }
    if (FString(ANSI_TO_TCHAR(Message->Category)) == TEXT("LogEOSRateLimiter") &&
        Message->Level == EOS_ELogLevel::EOS_LOG_Warning &&
        FString(ANSI_TO_TCHAR(Message->Message))
            .Contains(TEXT("Falling back to the configuration of service level limits.")))
    {
        // These warnings confuse developers and they're never important. Lower this to very verbose.
        EOSMsgLevel = EOS_ELogLevel::EOS_LOG_VeryVerbose;
    }
    if (FString(ANSI_TO_TCHAR(Message->Category)) == TEXT("LogEOSRTC") &&
        Message->Level == EOS_ELogLevel::EOS_LOG_Error &&
        FString(ANSI_TO_TCHAR(Message->Message))
            .Contains(TEXT("Attempted to call EOS_RTC_LeaveRoom on an internally managed room.")))
    {
        // The EOS SDK incorrectly logs this error when joining an RTC-enabled lobby. It's not an actionable message by
        // the user (or by the plugin implementation). Hide it entirely.
        EOSMsgLevel = EOS_ELogLevel::EOS_LOG_VeryVerbose;
    }
    if (FString(ANSI_TO_TCHAR(Message->Category)) == TEXT("LogEOSAnalytics") &&
        (Message->Level == EOS_ELogLevel::EOS_LOG_Verbose || Message->Level == EOS_ELogLevel::EOS_LOG_Warning))
    {
        // These logs are extremely spammy when the EOS overlay is active. Just
        // hide them because they're not even useful for debugging.
        EOSMsgLevel = EOS_ELogLevel::EOS_LOG_VeryVerbose;
    }
    if (FString(ANSI_TO_TCHAR(Message->Category)) == TEXT("LogEOSAuth") &&
        Message->Level == EOS_ELogLevel::EOS_LOG_Warning &&
        (FString(ANSI_TO_TCHAR(Message->Message))
             .Contains(TEXT("FAccountUtil::GetAsEpicAccount - Epic Account is Empty")) ||
         FString(ANSI_TO_TCHAR(Message->Message))
             .Contains(TEXT("FAccountPortalBrowserManager::Init: Failed to register overlay: EOS_NotConfigured"))))
    {
        // These are internal EOS SDK 1.15 warnings and aren't actionable by the developer.
        EOSMsgLevel = EOS_ELogLevel::EOS_LOG_VeryVerbose;
    }
    if (FString(ANSI_TO_TCHAR(Message->Category)) == TEXT("LogEOSRTC") &&
        Message->Level == EOS_ELogLevel::EOS_LOG_Error &&
        (FString(ANSI_TO_TCHAR(Message->Message))
             .Contains(
                 TEXT("RTCClient Attempted to call 'EOS_RTC_AddNotifyDisconnected' on an internally managed room."))))
    {
        // These are internal EOS SDK 1.16 errors and aren't actionable by the developer.
        EOSMsgLevel = EOS_ELogLevel::EOS_LOG_VeryVerbose;
    }
    if (FString(ANSI_TO_TCHAR(Message->Category)) == TEXT("LogEOSOverlay") &&
        Message->Level == EOS_ELogLevel::EOS_LOG_Error &&
        (FString(ANSI_TO_TCHAR(Message->Message)).StartsWith(TEXT("Unable to open"))))
    {
        EOSMsgLevel = EOS_ELogLevel::EOS_LOG_Warning;
    }
#if PLATFORM_WINDOWS
    if (FString(ANSI_TO_TCHAR(Message->Category)) == TEXT("LogEOS") && Message->Level == EOS_ELogLevel::EOS_LOG_Error &&
        FString(ANSI_TO_TCHAR(Message->Message))
            .Contains(TEXT("Invalid input platform options. EOS_EResult: EOS_IncompatibleVersion")))
    {
        HMODULE LoadedEOSHandle = nullptr;
        if (GetModuleHandleEx(
                GET_MODULE_HANDLE_EX_FLAG_FROM_ADDRESS | GET_MODULE_HANDLE_EX_FLAG_UNCHANGED_REFCOUNT,
                (LPCWSTR)&EOS_Platform_Create,
                &LoadedEOSHandle) != 0)
        {
            WCHAR ModulePath[4196];
            if (GetModuleFileName(LoadedEOSHandle, ModulePath, sizeof(ModulePath)) != 0)
            {
                UE_LOG(
                    LogRedpointEOS,
                    Error,
                    TEXT("Detected an incompatible version of the EOS SDK loaded from: %s. Please delete this file and "
                         "restart the editor or game."),
                    ModulePath);
            }
            else
            {
                UE_LOG(
                    LogRedpointEOS,
                    Warning,
                    TEXT("Unable to detect path to currently loaded EOS module while trying to provide path to "
                         "remove."));
            }
        }
        else
        {
            UE_LOG(
                LogRedpointEOS,
                Warning,
                TEXT("Unable to get handle to currently loaded EOS module while trying to provide path to remove."));
        }
    }
#endif

    switch (EOSMsgLevel)
    {
    case EOS_ELogLevel::EOS_LOG_Fatal:
    case EOS_ELogLevel::EOS_LOG_Error:
        UE_LOG(
            LogRedpointEOS,
            Error,
            TEXT("[%s] %s"),
            ANSI_TO_TCHAR(Message->Category),
            ANSI_TO_TCHAR(Message->Message));
        break;
    case EOS_ELogLevel::EOS_LOG_Warning:
        UE_LOG(
            LogRedpointEOS,
            Warning,
            TEXT("[%s] %s"),
            ANSI_TO_TCHAR(Message->Category),
            ANSI_TO_TCHAR(Message->Message));
        break;
    case EOS_ELogLevel::EOS_LOG_Info:
        UE_LOG(LogRedpointEOS, Log, TEXT("[%s] %s"), ANSI_TO_TCHAR(Message->Category), ANSI_TO_TCHAR(Message->Message));
        break;
    case EOS_ELogLevel::EOS_LOG_Verbose:
        UE_LOG(
            LogRedpointEOS,
            Verbose,
            TEXT("[%s] %s"),
            ANSI_TO_TCHAR(Message->Category),
            ANSI_TO_TCHAR(Message->Message));
        break;
    case EOS_ELogLevel::EOS_LOG_VeryVerbose:
        UE_LOG(
            LogRedpointEOS,
            VeryVerbose,
            TEXT("[%s] %s"),
            ANSI_TO_TCHAR(Message->Category),
            ANSI_TO_TCHAR(Message->Message));
        break;
    }

#if WITH_EDITOR
    FSDKLogging::EditorLogHandler.ExecuteIfBound(
        (int32_t)EOSMsgLevel,
        ANSI_TO_TCHAR(Message->Category),
        ANSI_TO_TCHAR(Message->Message));
#endif
}

} // namespace Redpoint::EOS::Core