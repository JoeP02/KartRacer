// Copyright June Rhodes 2024. All Rights Reserved.

#pragma once

#include "RedpointEOSAPI/Error/Decl.h"

namespace Redpoint::EOS::API
{
namespace Errors
{
REDPOINTEOSAPI_API const FError& Success();
REDPOINTEOSAPI_API const FError Success(const TCHAR *InCall, const FString &InContextMsg);
REDPOINTEOSAPI_API const FError& UnexpectedError();
REDPOINTEOSAPI_API const FError UnexpectedError(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError UnexpectedError(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& NoConnection();
REDPOINTEOSAPI_API const FError NoConnection(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError NoConnection(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InvalidParameters();
REDPOINTEOSAPI_API const FError InvalidParameters(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InvalidParameters(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InvalidRequest();
REDPOINTEOSAPI_API const FError InvalidRequest(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InvalidRequest(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& UnrecognizedResponse();
REDPOINTEOSAPI_API const FError UnrecognizedResponse(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError UnrecognizedResponse(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& IncompatibleVersion();
REDPOINTEOSAPI_API const FError IncompatibleVersion(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError IncompatibleVersion(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& NotConfigured();
REDPOINTEOSAPI_API const FError NotConfigured(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError NotConfigured(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& AlreadyConfigured();
REDPOINTEOSAPI_API const FError AlreadyConfigured(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError AlreadyConfigured(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& NotImplemented();
REDPOINTEOSAPI_API const FError NotImplemented(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError NotImplemented(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& Canceled();
REDPOINTEOSAPI_API const FError Canceled(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError Canceled(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& NotFound();
REDPOINTEOSAPI_API const FError NotFound(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError NotFound(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& Permission_RequiredPatchAvailable();
REDPOINTEOSAPI_API const FError Permission_RequiredPatchAvailable(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError Permission_RequiredPatchAvailable(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& Permission_RequiredSystemUpdate();
REDPOINTEOSAPI_API const FError Permission_RequiredSystemUpdate(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError Permission_RequiredSystemUpdate(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& Permission_AgeRestrictionFailure();
REDPOINTEOSAPI_API const FError Permission_AgeRestrictionFailure(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError Permission_AgeRestrictionFailure(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& Permission_AccountTypeFailure();
REDPOINTEOSAPI_API const FError Permission_AccountTypeFailure(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError Permission_AccountTypeFailure(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& Permission_ChatRestriction();
REDPOINTEOSAPI_API const FError Permission_ChatRestriction(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError Permission_ChatRestriction(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& Permission_UGCRestriction();
REDPOINTEOSAPI_API const FError Permission_UGCRestriction(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError Permission_UGCRestriction(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& Permission_OnlinePlayRestricted();
REDPOINTEOSAPI_API const FError Permission_OnlinePlayRestricted(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError Permission_OnlinePlayRestricted(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& OperationWillRetry();
REDPOINTEOSAPI_API const FError OperationWillRetry(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError OperationWillRetry(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& DesktopCrossplay_ApplicationNotBootstrapped();
REDPOINTEOSAPI_API const FError DesktopCrossplay_ApplicationNotBootstrapped(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError DesktopCrossplay_ApplicationNotBootstrapped(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& DesktopCrossplay_ServiceNotInstalled();
REDPOINTEOSAPI_API const FError DesktopCrossplay_ServiceNotInstalled(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError DesktopCrossplay_ServiceNotInstalled(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& DesktopCrossplay_ServiceStartFailed();
REDPOINTEOSAPI_API const FError DesktopCrossplay_ServiceStartFailed(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError DesktopCrossplay_ServiceStartFailed(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& DesktopCrossplay_ServiceNotRunning();
REDPOINTEOSAPI_API const FError DesktopCrossplay_ServiceNotRunning(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError DesktopCrossplay_ServiceNotRunning(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InvalidCredentials();
REDPOINTEOSAPI_API const FError InvalidCredentials(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InvalidCredentials(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& NoChange();
REDPOINTEOSAPI_API const FError NoChange(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError NoChange(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& CustomInvites_InviteFailed();
REDPOINTEOSAPI_API const FError CustomInvites_InviteFailed(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError CustomInvites_InviteFailed(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& VersionMismatch();
REDPOINTEOSAPI_API const FError VersionMismatch(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError VersionMismatch(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& LimitExceeded();
REDPOINTEOSAPI_API const FError LimitExceeded(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError LimitExceeded(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& UserInfo_BestDisplayNameIndeterminate();
REDPOINTEOSAPI_API const FError UserInfo_BestDisplayNameIndeterminate(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError UserInfo_BestDisplayNameIndeterminate(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& Disabled();
REDPOINTEOSAPI_API const FError Disabled(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError Disabled(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& DuplicateNotAllowed();
REDPOINTEOSAPI_API const FError DuplicateNotAllowed(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError DuplicateNotAllowed(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InvalidSandboxId();
REDPOINTEOSAPI_API const FError InvalidSandboxId(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InvalidSandboxId(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& TimedOut();
REDPOINTEOSAPI_API const FError TimedOut(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError TimedOut(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& PartialResult();
REDPOINTEOSAPI_API const FError PartialResult(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError PartialResult(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& Missing_Role();
REDPOINTEOSAPI_API const FError Missing_Role(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError Missing_Role(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InvalidUser();
REDPOINTEOSAPI_API const FError InvalidUser(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InvalidUser(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& Missing_Feature();
REDPOINTEOSAPI_API const FError Missing_Feature(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError Missing_Feature(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& Invalid_Sandbox();
REDPOINTEOSAPI_API const FError Invalid_Sandbox(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError Invalid_Sandbox(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& Invalid_Deployment();
REDPOINTEOSAPI_API const FError Invalid_Deployment(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError Invalid_Deployment(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& Invalid_Product();
REDPOINTEOSAPI_API const FError Invalid_Product(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError Invalid_Product(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& Invalid_ProductUserID();
REDPOINTEOSAPI_API const FError Invalid_ProductUserID(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError Invalid_ProductUserID(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ServiceFailure();
REDPOINTEOSAPI_API const FError ServiceFailure(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ServiceFailure(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& CacheDirectoryMissing();
REDPOINTEOSAPI_API const FError CacheDirectoryMissing(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError CacheDirectoryMissing(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& CacheDirectoryInvalid();
REDPOINTEOSAPI_API const FError CacheDirectoryInvalid(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError CacheDirectoryInvalid(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InvalidState();
REDPOINTEOSAPI_API const FError InvalidState(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InvalidState(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& RequestInProgress();
REDPOINTEOSAPI_API const FError RequestInProgress(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError RequestInProgress(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InvalidAuth();
REDPOINTEOSAPI_API const FError InvalidAuth(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InvalidAuth(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ApplicationSuspended();
REDPOINTEOSAPI_API const FError ApplicationSuspended(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ApplicationSuspended(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& NetworkDisconnected();
REDPOINTEOSAPI_API const FError NetworkDisconnected(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError NetworkDisconnected(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& AccessDenied();
REDPOINTEOSAPI_API const FError AccessDenied(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError AccessDenied(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& MissingPermissions();
REDPOINTEOSAPI_API const FError MissingPermissions(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError MissingPermissions(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& Token_Not_Account();
REDPOINTEOSAPI_API const FError Token_Not_Account(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError Token_Not_Account(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& TooManyRequests();
REDPOINTEOSAPI_API const FError TooManyRequests(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError TooManyRequests(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& AlreadyPending();
REDPOINTEOSAPI_API const FError AlreadyPending(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError AlreadyPending(const TCHAR* InCall, const TCHAR* InContextMsg);
namespace Auth
{
REDPOINTEOSAPI_API const FError& AccountLocked();
REDPOINTEOSAPI_API const FError AccountLocked(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError AccountLocked(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& AccountLockedForUpdate();
REDPOINTEOSAPI_API const FError AccountLockedForUpdate(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError AccountLockedForUpdate(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InvalidRefreshToken();
REDPOINTEOSAPI_API const FError InvalidRefreshToken(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InvalidRefreshToken(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InvalidToken();
REDPOINTEOSAPI_API const FError InvalidToken(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InvalidToken(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& AuthenticationFailure();
REDPOINTEOSAPI_API const FError AuthenticationFailure(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError AuthenticationFailure(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InvalidPlatformToken();
REDPOINTEOSAPI_API const FError InvalidPlatformToken(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InvalidPlatformToken(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& WrongAccount();
REDPOINTEOSAPI_API const FError WrongAccount(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError WrongAccount(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& WrongClient();
REDPOINTEOSAPI_API const FError WrongClient(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError WrongClient(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& FullAccountRequired();
REDPOINTEOSAPI_API const FError FullAccountRequired(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError FullAccountRequired(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& HeadlessAccountRequired();
REDPOINTEOSAPI_API const FError HeadlessAccountRequired(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError HeadlessAccountRequired(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& PasswordResetRequired();
REDPOINTEOSAPI_API const FError PasswordResetRequired(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError PasswordResetRequired(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& PasswordCannotBeReused();
REDPOINTEOSAPI_API const FError PasswordCannotBeReused(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError PasswordCannotBeReused(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& Expired();
REDPOINTEOSAPI_API const FError Expired(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError Expired(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ScopeConsentRequired();
REDPOINTEOSAPI_API const FError ScopeConsentRequired(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ScopeConsentRequired(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ApplicationNotFound();
REDPOINTEOSAPI_API const FError ApplicationNotFound(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ApplicationNotFound(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ScopeNotFound();
REDPOINTEOSAPI_API const FError ScopeNotFound(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ScopeNotFound(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& AccountFeatureRestricted();
REDPOINTEOSAPI_API const FError AccountFeatureRestricted(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError AccountFeatureRestricted(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& AccountPortalLoadError();
REDPOINTEOSAPI_API const FError AccountPortalLoadError(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError AccountPortalLoadError(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& CorrectiveActionRequired();
REDPOINTEOSAPI_API const FError CorrectiveActionRequired(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError CorrectiveActionRequired(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& PinGrantCode();
REDPOINTEOSAPI_API const FError PinGrantCode(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError PinGrantCode(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& PinGrantExpired();
REDPOINTEOSAPI_API const FError PinGrantExpired(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError PinGrantExpired(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& PinGrantPending();
REDPOINTEOSAPI_API const FError PinGrantPending(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError PinGrantPending(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ExternalAuthNotLinked();
REDPOINTEOSAPI_API const FError ExternalAuthNotLinked(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ExternalAuthNotLinked(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ExternalAuthRevoked();
REDPOINTEOSAPI_API const FError ExternalAuthRevoked(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ExternalAuthRevoked(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ExternalAuthInvalid();
REDPOINTEOSAPI_API const FError ExternalAuthInvalid(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ExternalAuthInvalid(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ExternalAuthRestricted();
REDPOINTEOSAPI_API const FError ExternalAuthRestricted(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ExternalAuthRestricted(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ExternalAuthCannotLogin();
REDPOINTEOSAPI_API const FError ExternalAuthCannotLogin(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ExternalAuthCannotLogin(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ExternalAuthExpired();
REDPOINTEOSAPI_API const FError ExternalAuthExpired(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ExternalAuthExpired(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ExternalAuthIsLastLoginType();
REDPOINTEOSAPI_API const FError ExternalAuthIsLastLoginType(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ExternalAuthIsLastLoginType(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ExchangeCodeNotFound();
REDPOINTEOSAPI_API const FError ExchangeCodeNotFound(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ExchangeCodeNotFound(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& OriginatingExchangeCodeSessionExpired();
REDPOINTEOSAPI_API const FError OriginatingExchangeCodeSessionExpired(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError OriginatingExchangeCodeSessionExpired(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& AccountNotActive();
REDPOINTEOSAPI_API const FError AccountNotActive(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError AccountNotActive(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& MFARequired();
REDPOINTEOSAPI_API const FError MFARequired(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError MFARequired(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ParentalControls();
REDPOINTEOSAPI_API const FError ParentalControls(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ParentalControls(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& NoRealId();
REDPOINTEOSAPI_API const FError NoRealId(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError NoRealId(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& UserInterfaceRequired();
REDPOINTEOSAPI_API const FError UserInterfaceRequired(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError UserInterfaceRequired(const TCHAR* InCall, const TCHAR* InContextMsg);
} // namespace Auth
namespace Friends
{
REDPOINTEOSAPI_API const FError& InviteAwaitingAcceptance();
REDPOINTEOSAPI_API const FError InviteAwaitingAcceptance(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InviteAwaitingAcceptance(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& NoInvitation();
REDPOINTEOSAPI_API const FError NoInvitation(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError NoInvitation(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& AlreadyFriends();
REDPOINTEOSAPI_API const FError AlreadyFriends(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError AlreadyFriends(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& NotFriends();
REDPOINTEOSAPI_API const FError NotFriends(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError NotFriends(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& TargetUserTooManyInvites();
REDPOINTEOSAPI_API const FError TargetUserTooManyInvites(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError TargetUserTooManyInvites(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& LocalUserTooManyInvites();
REDPOINTEOSAPI_API const FError LocalUserTooManyInvites(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError LocalUserTooManyInvites(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& TargetUserFriendLimitExceeded();
REDPOINTEOSAPI_API const FError TargetUserFriendLimitExceeded(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError TargetUserFriendLimitExceeded(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& LocalUserFriendLimitExceeded();
REDPOINTEOSAPI_API const FError LocalUserFriendLimitExceeded(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError LocalUserFriendLimitExceeded(const TCHAR* InCall, const TCHAR* InContextMsg);
} // namespace Friends
namespace Presence
{
REDPOINTEOSAPI_API const FError& DataInvalid();
REDPOINTEOSAPI_API const FError DataInvalid(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError DataInvalid(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& DataLengthInvalid();
REDPOINTEOSAPI_API const FError DataLengthInvalid(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError DataLengthInvalid(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& DataKeyInvalid();
REDPOINTEOSAPI_API const FError DataKeyInvalid(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError DataKeyInvalid(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& DataKeyLengthInvalid();
REDPOINTEOSAPI_API const FError DataKeyLengthInvalid(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError DataKeyLengthInvalid(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& DataValueInvalid();
REDPOINTEOSAPI_API const FError DataValueInvalid(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError DataValueInvalid(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& DataValueLengthInvalid();
REDPOINTEOSAPI_API const FError DataValueLengthInvalid(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError DataValueLengthInvalid(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& RichTextInvalid();
REDPOINTEOSAPI_API const FError RichTextInvalid(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError RichTextInvalid(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& RichTextLengthInvalid();
REDPOINTEOSAPI_API const FError RichTextLengthInvalid(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError RichTextLengthInvalid(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& StatusInvalid();
REDPOINTEOSAPI_API const FError StatusInvalid(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError StatusInvalid(const TCHAR* InCall, const TCHAR* InContextMsg);
} // namespace Presence
namespace Ecom
{
REDPOINTEOSAPI_API const FError& EntitlementStale();
REDPOINTEOSAPI_API const FError EntitlementStale(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError EntitlementStale(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& CatalogOfferStale();
REDPOINTEOSAPI_API const FError CatalogOfferStale(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError CatalogOfferStale(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& CatalogItemStale();
REDPOINTEOSAPI_API const FError CatalogItemStale(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError CatalogItemStale(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& CatalogOfferPriceInvalid();
REDPOINTEOSAPI_API const FError CatalogOfferPriceInvalid(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError CatalogOfferPriceInvalid(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& CheckoutLoadError();
REDPOINTEOSAPI_API const FError CheckoutLoadError(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError CheckoutLoadError(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& PurchaseProcessing();
REDPOINTEOSAPI_API const FError PurchaseProcessing(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError PurchaseProcessing(const TCHAR* InCall, const TCHAR* InContextMsg);
} // namespace Ecom
namespace Sessions
{
REDPOINTEOSAPI_API const FError& SessionInProgress();
REDPOINTEOSAPI_API const FError SessionInProgress(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError SessionInProgress(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& TooManyPlayers();
REDPOINTEOSAPI_API const FError TooManyPlayers(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError TooManyPlayers(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& NoPermission();
REDPOINTEOSAPI_API const FError NoPermission(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError NoPermission(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& SessionAlreadyExists();
REDPOINTEOSAPI_API const FError SessionAlreadyExists(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError SessionAlreadyExists(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InvalidLock();
REDPOINTEOSAPI_API const FError InvalidLock(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InvalidLock(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InvalidSession();
REDPOINTEOSAPI_API const FError InvalidSession(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InvalidSession(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& SandboxNotAllowed();
REDPOINTEOSAPI_API const FError SandboxNotAllowed(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError SandboxNotAllowed(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InviteFailed();
REDPOINTEOSAPI_API const FError InviteFailed(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InviteFailed(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InviteNotFound();
REDPOINTEOSAPI_API const FError InviteNotFound(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InviteNotFound(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& UpsertNotAllowed();
REDPOINTEOSAPI_API const FError UpsertNotAllowed(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError UpsertNotAllowed(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& AggregationFailed();
REDPOINTEOSAPI_API const FError AggregationFailed(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError AggregationFailed(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& HostAtCapacity();
REDPOINTEOSAPI_API const FError HostAtCapacity(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError HostAtCapacity(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& SandboxAtCapacity();
REDPOINTEOSAPI_API const FError SandboxAtCapacity(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError SandboxAtCapacity(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& SessionNotAnonymous();
REDPOINTEOSAPI_API const FError SessionNotAnonymous(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError SessionNotAnonymous(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& OutOfSync();
REDPOINTEOSAPI_API const FError OutOfSync(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError OutOfSync(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& TooManyInvites();
REDPOINTEOSAPI_API const FError TooManyInvites(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError TooManyInvites(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& PresenceSessionExists();
REDPOINTEOSAPI_API const FError PresenceSessionExists(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError PresenceSessionExists(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& DeploymentAtCapacity();
REDPOINTEOSAPI_API const FError DeploymentAtCapacity(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError DeploymentAtCapacity(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& NotAllowed();
REDPOINTEOSAPI_API const FError NotAllowed(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError NotAllowed(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& PlayerSanctioned();
REDPOINTEOSAPI_API const FError PlayerSanctioned(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError PlayerSanctioned(const TCHAR* InCall, const TCHAR* InContextMsg);
} // namespace Sessions
namespace PlayerDataStorage
{
REDPOINTEOSAPI_API const FError& FilenameInvalid();
REDPOINTEOSAPI_API const FError FilenameInvalid(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError FilenameInvalid(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& FilenameLengthInvalid();
REDPOINTEOSAPI_API const FError FilenameLengthInvalid(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError FilenameLengthInvalid(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& FilenameInvalidChars();
REDPOINTEOSAPI_API const FError FilenameInvalidChars(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError FilenameInvalidChars(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& FileSizeTooLarge();
REDPOINTEOSAPI_API const FError FileSizeTooLarge(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError FileSizeTooLarge(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& FileSizeInvalid();
REDPOINTEOSAPI_API const FError FileSizeInvalid(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError FileSizeInvalid(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& FileHandleInvalid();
REDPOINTEOSAPI_API const FError FileHandleInvalid(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError FileHandleInvalid(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& DataInvalid();
REDPOINTEOSAPI_API const FError DataInvalid(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError DataInvalid(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& DataLengthInvalid();
REDPOINTEOSAPI_API const FError DataLengthInvalid(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError DataLengthInvalid(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& StartIndexInvalid();
REDPOINTEOSAPI_API const FError StartIndexInvalid(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError StartIndexInvalid(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& RequestInProgress();
REDPOINTEOSAPI_API const FError RequestInProgress(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError RequestInProgress(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& UserThrottled();
REDPOINTEOSAPI_API const FError UserThrottled(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError UserThrottled(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& EncryptionKeyNotSet();
REDPOINTEOSAPI_API const FError EncryptionKeyNotSet(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError EncryptionKeyNotSet(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& UserErrorFromDataCallback();
REDPOINTEOSAPI_API const FError UserErrorFromDataCallback(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError UserErrorFromDataCallback(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& FileHeaderHasNewerVersion();
REDPOINTEOSAPI_API const FError FileHeaderHasNewerVersion(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError FileHeaderHasNewerVersion(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& FileCorrupted();
REDPOINTEOSAPI_API const FError FileCorrupted(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError FileCorrupted(const TCHAR* InCall, const TCHAR* InContextMsg);
} // namespace PlayerDataStorage
namespace Connect
{
REDPOINTEOSAPI_API const FError& ExternalTokenValidationFailed();
REDPOINTEOSAPI_API const FError ExternalTokenValidationFailed(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ExternalTokenValidationFailed(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& UserAlreadyExists();
REDPOINTEOSAPI_API const FError UserAlreadyExists(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError UserAlreadyExists(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& AuthExpired();
REDPOINTEOSAPI_API const FError AuthExpired(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError AuthExpired(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InvalidToken();
REDPOINTEOSAPI_API const FError InvalidToken(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InvalidToken(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& UnsupportedTokenType();
REDPOINTEOSAPI_API const FError UnsupportedTokenType(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError UnsupportedTokenType(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& LinkAccountFailed();
REDPOINTEOSAPI_API const FError LinkAccountFailed(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError LinkAccountFailed(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ExternalServiceUnavailable();
REDPOINTEOSAPI_API const FError ExternalServiceUnavailable(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ExternalServiceUnavailable(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ExternalServiceConfigurationFailure();
REDPOINTEOSAPI_API const FError ExternalServiceConfigurationFailure(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ExternalServiceConfigurationFailure(const TCHAR* InCall, const TCHAR* InContextMsg);
} // namespace Connect
namespace UI
{
REDPOINTEOSAPI_API const FError& SocialOverlayLoadError();
REDPOINTEOSAPI_API const FError SocialOverlayLoadError(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError SocialOverlayLoadError(const TCHAR* InCall, const TCHAR* InContextMsg);
} // namespace UI
namespace Lobby
{
REDPOINTEOSAPI_API const FError& NotOwner();
REDPOINTEOSAPI_API const FError NotOwner(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError NotOwner(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InvalidLock();
REDPOINTEOSAPI_API const FError InvalidLock(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InvalidLock(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& LobbyAlreadyExists();
REDPOINTEOSAPI_API const FError LobbyAlreadyExists(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError LobbyAlreadyExists(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& SessionInProgress();
REDPOINTEOSAPI_API const FError SessionInProgress(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError SessionInProgress(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& TooManyPlayers();
REDPOINTEOSAPI_API const FError TooManyPlayers(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError TooManyPlayers(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& NoPermission();
REDPOINTEOSAPI_API const FError NoPermission(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError NoPermission(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InvalidSession();
REDPOINTEOSAPI_API const FError InvalidSession(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InvalidSession(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& SandboxNotAllowed();
REDPOINTEOSAPI_API const FError SandboxNotAllowed(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError SandboxNotAllowed(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InviteFailed();
REDPOINTEOSAPI_API const FError InviteFailed(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InviteFailed(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InviteNotFound();
REDPOINTEOSAPI_API const FError InviteNotFound(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InviteNotFound(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& UpsertNotAllowed();
REDPOINTEOSAPI_API const FError UpsertNotAllowed(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError UpsertNotAllowed(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& AggregationFailed();
REDPOINTEOSAPI_API const FError AggregationFailed(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError AggregationFailed(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& HostAtCapacity();
REDPOINTEOSAPI_API const FError HostAtCapacity(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError HostAtCapacity(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& SandboxAtCapacity();
REDPOINTEOSAPI_API const FError SandboxAtCapacity(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError SandboxAtCapacity(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& TooManyInvites();
REDPOINTEOSAPI_API const FError TooManyInvites(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError TooManyInvites(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& DeploymentAtCapacity();
REDPOINTEOSAPI_API const FError DeploymentAtCapacity(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError DeploymentAtCapacity(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& NotAllowed();
REDPOINTEOSAPI_API const FError NotAllowed(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError NotAllowed(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& MemberUpdateOnly();
REDPOINTEOSAPI_API const FError MemberUpdateOnly(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError MemberUpdateOnly(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& PresenceLobbyExists();
REDPOINTEOSAPI_API const FError PresenceLobbyExists(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError PresenceLobbyExists(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& VoiceNotEnabled();
REDPOINTEOSAPI_API const FError VoiceNotEnabled(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError VoiceNotEnabled(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& PlatformNotAllowed();
REDPOINTEOSAPI_API const FError PlatformNotAllowed(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError PlatformNotAllowed(const TCHAR* InCall, const TCHAR* InContextMsg);
} // namespace Lobby
namespace TitleStorage
{
REDPOINTEOSAPI_API const FError& UserErrorFromDataCallback();
REDPOINTEOSAPI_API const FError UserErrorFromDataCallback(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError UserErrorFromDataCallback(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& EncryptionKeyNotSet();
REDPOINTEOSAPI_API const FError EncryptionKeyNotSet(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError EncryptionKeyNotSet(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& FileCorrupted();
REDPOINTEOSAPI_API const FError FileCorrupted(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError FileCorrupted(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& FileHeaderHasNewerVersion();
REDPOINTEOSAPI_API const FError FileHeaderHasNewerVersion(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError FileHeaderHasNewerVersion(const TCHAR* InCall, const TCHAR* InContextMsg);
} // namespace TitleStorage
namespace Mods
{
REDPOINTEOSAPI_API const FError& ModSdkProcessIsAlreadyRunning();
REDPOINTEOSAPI_API const FError ModSdkProcessIsAlreadyRunning(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ModSdkProcessIsAlreadyRunning(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ModSdkCommandIsEmpty();
REDPOINTEOSAPI_API const FError ModSdkCommandIsEmpty(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ModSdkCommandIsEmpty(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ModSdkProcessCreationFailed();
REDPOINTEOSAPI_API const FError ModSdkProcessCreationFailed(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ModSdkProcessCreationFailed(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& CriticalError();
REDPOINTEOSAPI_API const FError CriticalError(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError CriticalError(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ToolInternalError();
REDPOINTEOSAPI_API const FError ToolInternalError(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ToolInternalError(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& IPCFailure();
REDPOINTEOSAPI_API const FError IPCFailure(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError IPCFailure(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InvalidIPCResponse();
REDPOINTEOSAPI_API const FError InvalidIPCResponse(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InvalidIPCResponse(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& URILaunchFailure();
REDPOINTEOSAPI_API const FError URILaunchFailure(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError URILaunchFailure(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ModIsNotInstalled();
REDPOINTEOSAPI_API const FError ModIsNotInstalled(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ModIsNotInstalled(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& UserDoesNotOwnTheGame();
REDPOINTEOSAPI_API const FError UserDoesNotOwnTheGame(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError UserDoesNotOwnTheGame(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& OfferRequestByIdInvalidResult();
REDPOINTEOSAPI_API const FError OfferRequestByIdInvalidResult(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError OfferRequestByIdInvalidResult(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& CouldNotFindOffer();
REDPOINTEOSAPI_API const FError CouldNotFindOffer(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError CouldNotFindOffer(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& OfferRequestByIdFailure();
REDPOINTEOSAPI_API const FError OfferRequestByIdFailure(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError OfferRequestByIdFailure(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& PurchaseFailure();
REDPOINTEOSAPI_API const FError PurchaseFailure(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError PurchaseFailure(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InvalidGameInstallInfo();
REDPOINTEOSAPI_API const FError InvalidGameInstallInfo(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InvalidGameInstallInfo(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& CannotGetManifestLocation();
REDPOINTEOSAPI_API const FError CannotGetManifestLocation(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError CannotGetManifestLocation(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& UnsupportedOS();
REDPOINTEOSAPI_API const FError UnsupportedOS(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError UnsupportedOS(const TCHAR* InCall, const TCHAR* InContextMsg);
} // namespace Mods
namespace AntiCheat
{
REDPOINTEOSAPI_API const FError& ClientProtectionNotAvailable();
REDPOINTEOSAPI_API const FError ClientProtectionNotAvailable(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ClientProtectionNotAvailable(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& InvalidMode();
REDPOINTEOSAPI_API const FError InvalidMode(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError InvalidMode(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ClientProductIdMismatch();
REDPOINTEOSAPI_API const FError ClientProductIdMismatch(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ClientProductIdMismatch(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ClientSandboxIdMismatch();
REDPOINTEOSAPI_API const FError ClientSandboxIdMismatch(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ClientSandboxIdMismatch(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ProtectMessageSessionKeyRequired();
REDPOINTEOSAPI_API const FError ProtectMessageSessionKeyRequired(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ProtectMessageSessionKeyRequired(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ProtectMessageValidationFailed();
REDPOINTEOSAPI_API const FError ProtectMessageValidationFailed(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ProtectMessageValidationFailed(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ProtectMessageInitializationFailed();
REDPOINTEOSAPI_API const FError ProtectMessageInitializationFailed(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ProtectMessageInitializationFailed(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& PeerAlreadyRegistered();
REDPOINTEOSAPI_API const FError PeerAlreadyRegistered(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError PeerAlreadyRegistered(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& PeerNotFound();
REDPOINTEOSAPI_API const FError PeerNotFound(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError PeerNotFound(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& PeerNotProtected();
REDPOINTEOSAPI_API const FError PeerNotProtected(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError PeerNotProtected(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ClientDeploymentIdMismatch();
REDPOINTEOSAPI_API const FError ClientDeploymentIdMismatch(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ClientDeploymentIdMismatch(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& DeviceIdAuthIsNotSupported();
REDPOINTEOSAPI_API const FError DeviceIdAuthIsNotSupported(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError DeviceIdAuthIsNotSupported(const TCHAR* InCall, const TCHAR* InContextMsg);
} // namespace AntiCheat
namespace RTC
{
REDPOINTEOSAPI_API const FError& TooManyParticipants();
REDPOINTEOSAPI_API const FError TooManyParticipants(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError TooManyParticipants(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& RoomAlreadyExists();
REDPOINTEOSAPI_API const FError RoomAlreadyExists(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError RoomAlreadyExists(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& UserKicked();
REDPOINTEOSAPI_API const FError UserKicked(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError UserKicked(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& UserBanned();
REDPOINTEOSAPI_API const FError UserBanned(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError UserBanned(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& RoomWasLeft();
REDPOINTEOSAPI_API const FError RoomWasLeft(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError RoomWasLeft(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ReconnectionTimegateExpired();
REDPOINTEOSAPI_API const FError ReconnectionTimegateExpired(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ReconnectionTimegateExpired(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& ShutdownInvoked();
REDPOINTEOSAPI_API const FError ShutdownInvoked(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ShutdownInvoked(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& UserIsInBlocklist();
REDPOINTEOSAPI_API const FError UserIsInBlocklist(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError UserIsInBlocklist(const TCHAR* InCall, const TCHAR* InContextMsg);
} // namespace RTC
namespace ProgressionSnapshot
{
REDPOINTEOSAPI_API const FError& SnapshotIdUnavailable();
REDPOINTEOSAPI_API const FError SnapshotIdUnavailable(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError SnapshotIdUnavailable(const TCHAR* InCall, const TCHAR* InContextMsg);
} // namespace ProgressionSnapshot
namespace KWS
{
REDPOINTEOSAPI_API const FError& ParentEmailMissing();
REDPOINTEOSAPI_API const FError ParentEmailMissing(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError ParentEmailMissing(const TCHAR* InCall, const TCHAR* InContextMsg);
REDPOINTEOSAPI_API const FError& UserGraduated();
REDPOINTEOSAPI_API const FError UserGraduated(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError UserGraduated(const TCHAR* InCall, const TCHAR* InContextMsg);
} // namespace KWS
namespace Android
{
REDPOINTEOSAPI_API const FError& JavaVMNotStored();
REDPOINTEOSAPI_API const FError JavaVMNotStored(const TCHAR* InCall, const FString& InContextMsg);
REDPOINTEOSAPI_API const FError JavaVMNotStored(const TCHAR* InCall, const TCHAR* InContextMsg);
} // namespace Android
} // namespace Errors
} // namespace Redpoint::EOS::API